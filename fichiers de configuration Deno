[1mdiff --git a/.vscode/extensions.json b/.vscode/extensions.json[m
[1mnew file mode 100644[m
[1mindex 0000000..74baffc[m
[1m--- /dev/null[m
[1m+++ b/.vscode/extensions.json[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "recommendations": ["denoland.vscode-deno"][m
[32m+[m[32m}[m
[1mdiff --git a/.vscode/settings.json b/.vscode/settings.json[m
[1mnew file mode 100644[m
[1mindex 0000000..af62c23[m
[1m--- /dev/null[m
[1m+++ b/.vscode/settings.json[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "deno.enablePaths": [[m
[32m+[m[32m    "supabase/functions"[m
[32m+[m[32m  ],[m
[32m+[m[32m  "deno.lint": true,[m
[32m+[m[32m  "deno.unstable": [[m
[32m+[m[32m    "bare-node-builtins",[m
[32m+[m[32m    "byonm",[m
[32m+[m[32m    "sloppy-imports",[m
[32m+[m[32m    "unsafe-proto",[m
[32m+[m[32m    "webgpu",[m
[32m+[m[32m    "broadcast-channel",[m
[32m+[m[32m    "worker-options",[m
[32m+[m[32m    "cron",[m
[32m+[m[32m    "kv",[m
[32m+[m[32m    "ffi",[m
[32m+[m[32m    "fs",[m
[32m+[m[32m    "http",[m
[32m+[m[32m    "net"[m
[32m+[m[32m  ],[m
[32m+[m[32m  "[typescript]": {[m
[32m+[m[32m    "editor.defaultFormatter": "denoland.vscode-deno"[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/app/(boat-manager)/_layout.tsx b/app/(boat-manager)/_layout.tsx[m
[1mindex fa631b3..d0a0c4b 100644[m
[1m--- a/app/(boat-manager)/_layout.tsx[m
[1m+++ b/app/(boat-manager)/_layout.tsx[m
[36m@@ -29,7 +29,7 @@[m [mexport default function BoatManagerTabLayout() {[m
         const { count: messagesCount, error: messagesError } = await supabase[m
           .from('messages')[m
           .select('id', { count: 'exact' })[m
[31m-          .eq('receiver_id', user.id.toString())[m
[32m+[m[32m          .eq('receiver_id', user.id)[m
           .eq('is_read', false);[m
 [m
         if (messagesError) {[m
[36m@@ -43,11 +43,24 @@[m [mexport default function BoatManagerTabLayout() {[m
         setUnreadMessages(0);[m
       }[m
 [m
[31m-      // Simulation de la r√©cup√©ration des requ√™tes non lues[m
[31m-      // Remplacez ceci par une logique de requ√™te r√©elle pour vos demandes[m
[31m-      setTimeout(() => {[m
[31m-        setUnreadRequests(2); // Exemple de valeur simul√©e[m
[31m-      }, 500);[m
[32m+[m[32m      // R√©cup√©ration des requ√™tes non lues (par exemple, les demandes soumises)[m
[32m+[m[32m      try {[m
[32m+[m[32m        const { count: requestsCount, error: requestsError } = await supabase[m
[32m+[m[32m          .from('service_request')[m
[32m+[m[32m          .select('id', { count: 'exact' })[m
[32m+[m[32m          .eq('id_boat_manager', user.id)[m
[32m+[m[32m          .eq('statut', 'submitted'); // Count requests with 'submitted' status as unread[m
[32m+[m
[32m+[m[32m        if (requestsError) {[m
[32m+[m[32m          console.error('Erreur lors de la r√©cup√©ration des requ√™tes non lues:', requestsError);[m
[32m+[m[32m          setUnreadRequests(0);[m
[32m+[m[32m        } else {[m
[32m+[m[32m          setUnreadRequests(requestsCount || 0);[m
[32m+[m[32m        }[m
[32m+[m[32m      } catch (e) {[m
[32m+[m[32m        console.error('Erreur inattendue lors de la r√©cup√©ration des requ√™tes non lues:', e);[m
[32m+[m[32m        setUnreadRequests(0);[m
[32m+[m[32m      }[m
     };[m
 [m
     fetchUnreadCounts();[m
[36m@@ -133,3 +146,4 @@[m [mexport default function BoatManagerTabLayout() {[m
     </Tabs>[m
   );[m
 }[m
[41m+[m
[1mdiff --git a/app/(boat-manager)/clients.tsx b/app/(boat-manager)/clients.tsx[m
[1mindex f635f90..15f5bdb 100644[m
[1m--- a/app/(boat-manager)/clients.tsx[m
[1m+++ b/app/(boat-manager)/clients.tsx[m
[36m@@ -1,211 +1,43 @@[m
[31m-import { useState } from 'react';[m
[32m+[m[32mimport { useState, useEffect } from 'react';[m
 import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image, Platform, TextInput, Modal } from 'react-native';[m
[31m-import { Users, MessageSquare, User, Bot as Boat, FileText, ChevronRight, MapPin, Calendar, CircleCheck as CheckCircle2, CircleDot, X, TriangleAlert as AlertTriangle, Plus, Upload, Mail, Phone, Search, Briefcase, Building, Star } from 'lucide-react-native'; // Changed XCircle to X[m
[32m+[m[32mimport { Users, MessageSquare, User, Bot as Boat, FileText, ChevronRight, MapPin, Calendar, CircleCheck as CheckCircle2, CircleDot, X, TriangleAlert as AlertTriangle, Plus, Upload, Mail, Phone, Search, Briefcase, Building, Star } from 'lucide-react-native';[m
 import { router } from 'expo-router';[m
[31m-import { useAuth } from '@/context/AuthContext';[m
[31m-[m
[31m-interface Client {[m
[31m-  id: string;[m
[31m-  name: string;[m
[31m-  avatar: string;[m
[31m-  email: string;[m
[31m-  phone: string;[m
[32m+[m[32mimport { useAuth, User as AuthUser, PleasureBoater, BoatManagerUser, NauticalCompany, CorporateUser } from '@/context/AuthContext';[m
[32m+[m[32mimport { supabase } from '@/src/lib/supabase';[m
[32m+[m
[32m+[m[32m// Interfaces mises √† jour pour correspondre aux donn√©es Supabase[m
[32m+[m[32minterface Client extends PleasureBoater {[m
   boats: Array<{[m
     id: string;[m
     name: string;[m
     type: string;[m
   }>;[m
[31m-  lastContact?: string;[m
[31m-  status: 'active' | 'pending' | 'inactive';[m
[31m-  hasNewRequests?: boolean;[m
[31m-  hasNewMessages?: boolean;[m
[32m+[m[32m  status: 'active' | 'pending' | 'inactive'; // Assuming status is directly on user profile[m
[32m+[m[32m  last_contact?: string;[m
[32m+[m[32m  has_new_requests?: boolean;[m
[32m+[m[32m  has_new_messages?: boolean;[m
 }[m
 [m
[31m-interface Company {[m
[31m-  id: string;[m
[31m-  name: string;[m
[31m-  logo: string;[m
[31m-  location: string;[m
[31m-  services: string[];[m
[31m-  contactName: string;[m
[31m-  contactEmail: string;[m
[31m-  contactPhone: string;[m
[32m+[m[32minterface Company extends NauticalCompany {[m
[32m+[m[32m  logo: string; // Assuming logo is part of NauticalCompany profile[m
[32m+[m[32m  commonPortName?: string; // New field for the common port name[m
[32m+[m[32m  fullAddress?: string; // New field for the full address[m
   hasNewRequests?: boolean;[m
[32m+[m[32m  contactEmail: string; // Ensure these are always present for display[m
[32m+[m[32m  contactPhone: string; // Ensure these are always present for display[m
 }[m
 [m
[31m-interface HeadquartersContact {[m
[31m-  id: string;[m
[31m-  name: string;[m
[31m-  avatar: string;[m
[31m-  role: string;[m
[31m-  department: string;[m
[31m-  email: string;[m
[31m-  phone: string;[m
[32m+[m[32minterface HeadquartersContact extends CorporateUser {[m
[32m+[m[32m  department?: string; // Assuming department is part of CorporateUser profile[m
   hasNewMessages?: boolean;[m
 }[m
 [m
[31m-interface OtherBoatManager {[m
[31m-  id: string;[m
[31m-  name: string;[m
[31m-  avatar: string;[m
[31m-  location: string;[m
[31m-  email: string;[m
[31m-  phone: string;[m
[31m-  specialties: string[];[m
[32m+[m[32minterface OtherBoatManager extends BoatManagerUser {[m
[32m+[m[32m  location?: string; // Assuming location can be derived from ports or added to profile[m
[32m+[m[32m  specialties?: string[]; // Assuming skills from BoatManagerUser can be used as specialties[m
   hasNewMessages?: boolean;[m
 }[m
 [m
[31m-const mockClients: Client[] = [[m
[31m-  {[m
[31m-    id: '1',[m
[31m-    name: 'Jean Dupont',[m
[31m-    avatar: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?q=80&w=2070&auto=format&fit=crop',[m
[31m-    email: 'jean.dupont@example.com',[m
[31m-    phone: '+33 6 12 34 56 78',[m
[31m-    status: 'active',[m
[31m-    lastContact: '2024-02-15',[m
[31m-    hasNewRequests: true,[m
[31m-    hasNewMessages: true,[m
[31m-    boats: [[m
[31m-      {[m
[31m-        id: '1',[m
[31m-        name: 'Le Grand Bleu',[m
[31m-        type: 'Voilier',[m
[31m-      },[m
[31m-    ]